#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.



require 'compass'
require 'uglifier'
require 'sprockets-sass'
require 'sprockets-helpers'
require 'nanoc-sprockets-filter'


Compass.add_project_configuration('config.rb')


Nanoc::Helpers::Sprockets.configure do |config|
  config.environment = Nanoc::Filters::Sprockets.environment
  config.prefix      = '/assets'
  config.digest      = true
end


compile %r{/assets/(stylesheets|javascripts)/.+/} do
  if item[:extension] == 'coffee'

  else
    filter :sprockets, {
      :css_compressor => :scss,
      :js_compressor  => :uglifier
    }
  end
end


compile '/images/*/' do
  
end


compile '/static/*' do

end


route '/assets/javascripts/*/' do
  if item[:extension] == 'coffee'
    nil
  else
    item.identifier.chop + '.js'
  end
end


route '/assets/stylesheets/*/' do
  item.identifier.chop + '.css'
end


route '/images/*/' do
  item.identifier.chop + '.' + item[:extension]
end


route '/static/*' do
  item.identifier[7..-2]
end


compile '*' do
  case item[:extension]
  when 'haml'
    filter :haml
  when 'mdown' || 'html'
    filter :erb
    filter :bluecloth
  end
  layout 'default' unless item[:layout] == 'none'
end


route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end


layout '*', :haml, { :format => :html5, :ugly => false, :attr_wrapper => '"' }
